//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmartVideo.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IServiceWCFSmart")]
    public interface IServiceWCFSmart {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFSmart/GetData", ReplyAction="http://tempuri.org/IServiceWCFSmart/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFSmart/GetData", ReplyAction="http://tempuri.org/IServiceWCFSmart/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFSmart/GetAllFilmsDBFilm", ReplyAction="http://tempuri.org/IServiceWCFSmart/GetAllFilmsDBFilmResponse")]
        DTOLibrary.FilmDTO[] GetAllFilmsDBFilm();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFSmart/GetAllFilmsDBFilm", ReplyAction="http://tempuri.org/IServiceWCFSmart/GetAllFilmsDBFilmResponse")]
        System.Threading.Tasks.Task<DTOLibrary.FilmDTO[]> GetAllFilmsDBFilmAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFSmart/GetFilmInfo", ReplyAction="http://tempuri.org/IServiceWCFSmart/GetFilmInfoResponse")]
        DTOLibrary.FilmDTO GetFilmInfo(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFSmart/GetFilmInfo", ReplyAction="http://tempuri.org/IServiceWCFSmart/GetFilmInfoResponse")]
        System.Threading.Tasks.Task<DTOLibrary.FilmDTO> GetFilmInfoAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFSmart/GetFilmsPage", ReplyAction="http://tempuri.org/IServiceWCFSmart/GetFilmsPageResponse")]
        DTOLibrary.FilmDTO[] GetFilmsPage(int page);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFSmart/GetFilmsPage", ReplyAction="http://tempuri.org/IServiceWCFSmart/GetFilmsPageResponse")]
        System.Threading.Tasks.Task<DTOLibrary.FilmDTO[]> GetFilmsPageAsync(int page);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFSmart/rechercherFilms", ReplyAction="http://tempuri.org/IServiceWCFSmart/rechercherFilmsResponse")]
        DTOLibrary.FilmDTO[] rechercherFilms(string table, string critere);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFSmart/rechercherFilms", ReplyAction="http://tempuri.org/IServiceWCFSmart/rechercherFilmsResponse")]
        System.Threading.Tasks.Task<DTOLibrary.FilmDTO[]> rechercherFilmsAsync(string table, string critere);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFSmart/ReserveFilm", ReplyAction="http://tempuri.org/IServiceWCFSmart/ReserveFilmResponse")]
        bool ReserveFilm(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFSmart/ReserveFilm", ReplyAction="http://tempuri.org/IServiceWCFSmart/ReserveFilmResponse")]
        System.Threading.Tasks.Task<bool> ReserveFilmAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFSmart/GetAllActors", ReplyAction="http://tempuri.org/IServiceWCFSmart/GetAllActorsResponse")]
        DTOLibrary.ActorDTO[] GetAllActors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFSmart/GetAllActors", ReplyAction="http://tempuri.org/IServiceWCFSmart/GetAllActorsResponse")]
        System.Threading.Tasks.Task<DTOLibrary.ActorDTO[]> GetAllActorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFSmart/GetAllGenres", ReplyAction="http://tempuri.org/IServiceWCFSmart/GetAllGenresResponse")]
        DTOLibrary.GenreDTO[] GetAllGenres();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFSmart/GetAllGenres", ReplyAction="http://tempuri.org/IServiceWCFSmart/GetAllGenresResponse")]
        System.Threading.Tasks.Task<DTOLibrary.GenreDTO[]> GetAllGenresAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFSmart/GetAllRealisators", ReplyAction="http://tempuri.org/IServiceWCFSmart/GetAllRealisatorsResponse")]
        DTOLibrary.RealisateurDTO[] GetAllRealisators();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFSmart/GetAllRealisators", ReplyAction="http://tempuri.org/IServiceWCFSmart/GetAllRealisatorsResponse")]
        System.Threading.Tasks.Task<DTOLibrary.RealisateurDTO[]> GetAllRealisatorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFSmart/RetourFilm", ReplyAction="http://tempuri.org/IServiceWCFSmart/RetourFilmResponse")]
        void RetourFilm(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCFSmart/RetourFilm", ReplyAction="http://tempuri.org/IServiceWCFSmart/RetourFilmResponse")]
        System.Threading.Tasks.Task RetourFilmAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceWCFSmartChannel : SmartVideo.ServiceReference.IServiceWCFSmart, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceWCFSmartClient : System.ServiceModel.ClientBase<SmartVideo.ServiceReference.IServiceWCFSmart>, SmartVideo.ServiceReference.IServiceWCFSmart {
        
        public ServiceWCFSmartClient() {
        }
        
        public ServiceWCFSmartClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceWCFSmartClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceWCFSmartClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceWCFSmartClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public DTOLibrary.FilmDTO[] GetAllFilmsDBFilm() {
            return base.Channel.GetAllFilmsDBFilm();
        }
        
        public System.Threading.Tasks.Task<DTOLibrary.FilmDTO[]> GetAllFilmsDBFilmAsync() {
            return base.Channel.GetAllFilmsDBFilmAsync();
        }
        
        public DTOLibrary.FilmDTO GetFilmInfo(int id) {
            return base.Channel.GetFilmInfo(id);
        }
        
        public System.Threading.Tasks.Task<DTOLibrary.FilmDTO> GetFilmInfoAsync(int id) {
            return base.Channel.GetFilmInfoAsync(id);
        }
        
        public DTOLibrary.FilmDTO[] GetFilmsPage(int page) {
            return base.Channel.GetFilmsPage(page);
        }
        
        public System.Threading.Tasks.Task<DTOLibrary.FilmDTO[]> GetFilmsPageAsync(int page) {
            return base.Channel.GetFilmsPageAsync(page);
        }
        
        public DTOLibrary.FilmDTO[] rechercherFilms(string table, string critere) {
            return base.Channel.rechercherFilms(table, critere);
        }
        
        public System.Threading.Tasks.Task<DTOLibrary.FilmDTO[]> rechercherFilmsAsync(string table, string critere) {
            return base.Channel.rechercherFilmsAsync(table, critere);
        }
        
        public bool ReserveFilm(int id) {
            return base.Channel.ReserveFilm(id);
        }
        
        public System.Threading.Tasks.Task<bool> ReserveFilmAsync(int id) {
            return base.Channel.ReserveFilmAsync(id);
        }
        
        public DTOLibrary.ActorDTO[] GetAllActors() {
            return base.Channel.GetAllActors();
        }
        
        public System.Threading.Tasks.Task<DTOLibrary.ActorDTO[]> GetAllActorsAsync() {
            return base.Channel.GetAllActorsAsync();
        }
        
        public DTOLibrary.GenreDTO[] GetAllGenres() {
            return base.Channel.GetAllGenres();
        }
        
        public System.Threading.Tasks.Task<DTOLibrary.GenreDTO[]> GetAllGenresAsync() {
            return base.Channel.GetAllGenresAsync();
        }
        
        public DTOLibrary.RealisateurDTO[] GetAllRealisators() {
            return base.Channel.GetAllRealisators();
        }
        
        public System.Threading.Tasks.Task<DTOLibrary.RealisateurDTO[]> GetAllRealisatorsAsync() {
            return base.Channel.GetAllRealisatorsAsync();
        }
        
        public void RetourFilm(int id) {
            base.Channel.RetourFilm(id);
        }
        
        public System.Threading.Tasks.Task RetourFilmAsync(int id) {
            return base.Channel.RetourFilmAsync(id);
        }
    }
}
